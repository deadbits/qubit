"""Initial database setup

Revision ID: cc37424d4e9b
Revises: 
Create Date: 2024-12-29 17:56:53.862742

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from pgvector.sqlalchemy import Vector


# revision identifiers, used by Alembic.
revision: str = "cc37424d4e9b"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def table_exists(table_name: str) -> bool:
    """Check if a table exists."""
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    return table_name in inspector.get_table_names()


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()

    # Create extensions if they don't exist
    op.execute("CREATE EXTENSION IF NOT EXISTS vector")
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp"')

    # Create users table if it doesn't exist
    if not table_exists("users"):
        op.create_table(
            "users",
            sa.Column("id", sa.Integer(), nullable=False),
            sa.Column("username", sa.String(length=50), nullable=False),
            sa.Column("email", sa.String(length=255), nullable=False),
            sa.Column("password_hash", sa.String(length=255), nullable=False),
            sa.Column("display_name", sa.String(length=100), nullable=True),
            sa.Column("bio", sa.Text(), nullable=True),
            sa.Column("is_active", sa.Boolean(), nullable=True),
            sa.Column("is_admin", sa.Boolean(), nullable=True),
            sa.Column("created_at", sa.DateTime(), nullable=True),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.PrimaryKeyConstraint("id"),
            sa.UniqueConstraint("email"),
            sa.UniqueConstraint("username"),
        )
        op.create_index("idx_users_username", "users", ["username"], unique=False)

    # Create tags table if it doesn't exist
    if not table_exists("tags"):
        op.create_table(
            "tags",
            sa.Column("id", sa.Integer(), nullable=False),
            sa.Column("name", sa.String(length=50), nullable=False),
            sa.Column("description", sa.String(length=200), nullable=True),
            sa.Column("created_at", sa.DateTime(), nullable=True),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.PrimaryKeyConstraint("id"),
            sa.UniqueConstraint("name"),
        )
        op.create_index("idx_tags_name", "tags", ["name"], unique=False)

    # Create posts table if it doesn't exist
    if not table_exists("posts"):
        op.create_table(
            "posts",
            sa.Column(
                "id",
                postgresql.UUID(as_uuid=True),
                server_default=sa.text("uuid_generate_v4()"),
                nullable=False,
            ),
            sa.Column("title", sa.String(length=255), nullable=False),
            sa.Column("content", sa.Text(), nullable=False),
            sa.Column("content_html", sa.Text(), nullable=False),
            sa.Column("slug", sa.String(length=255), nullable=False),
            sa.Column("published", sa.Boolean(), nullable=True),
            sa.Column("published_at", sa.DateTime(), nullable=True),
            sa.Column("author_id", sa.Integer(), nullable=False),
            sa.Column("content_embedding", Vector(3072), nullable=True),
            sa.Column("created_at", sa.DateTime(), nullable=True),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(
                ["author_id"],
                ["users.id"],
            ),
            sa.PrimaryKeyConstraint("id"),
        )
        op.create_index("idx_posts_slug", "posts", ["slug"], unique=False)

    # Create feed_posts table if it doesn't exist
    if not table_exists("feed_posts"):
        op.create_table(
            "feed_posts",
            sa.Column(
                "id",
                postgresql.UUID(as_uuid=True),
                server_default=sa.text("uuid_generate_v4()"),
                nullable=False,
            ),
            sa.Column("content", sa.Text(), nullable=False),
            sa.Column("author_id", sa.Integer(), nullable=False),
            sa.Column("author_name", sa.String(length=50), nullable=False),
            sa.Column("created_at", sa.DateTime(), nullable=True),
            sa.Column("updated_at", sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(
                ["author_id"],
                ["users.id"],
            ),
            sa.PrimaryKeyConstraint("id"),
        )
        op.create_index(
            "idx_feed_posts_created_at",
            "feed_posts",
            [sa.text("created_at DESC")],
            unique=False,
        )

    # Create post_tags table if it doesn't exist
    if not table_exists("post_tags"):
        op.create_table(
            "post_tags",
            sa.Column("post_id", postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column("tag_id", sa.Integer(), nullable=False),
            sa.ForeignKeyConstraint(["post_id"], ["posts.id"], ondelete="CASCADE"),
            sa.ForeignKeyConstraint(["tag_id"], ["tags.id"], ondelete="CASCADE"),
            sa.PrimaryKeyConstraint("post_id", "tag_id"),
        )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    if table_exists("post_tags"):
        op.drop_table("post_tags")
    if table_exists("feed_posts"):
        op.drop_index("idx_feed_posts_created_at", table_name="feed_posts")
        op.drop_table("feed_posts")
    if table_exists("posts"):
        op.drop_index("idx_posts_slug", table_name="posts")
        op.drop_table("posts")
    if table_exists("tags"):
        op.drop_index("idx_tags_name", table_name="tags")
        op.drop_table("tags")
    if table_exists("users"):
        op.drop_index("idx_users_username", table_name="users")
        op.drop_table("users")
    op.execute("DROP EXTENSION IF EXISTS vector")
    op.execute('DROP EXTENSION IF EXISTS "uuid-ossp"')
    # ### end Alembic commands ###
